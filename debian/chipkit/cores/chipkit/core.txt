name=chipkit
description=chipKIT
compiler=pic32-tools

core.flags=-DF_CPU=${build.f_cpu}::-DARDUINO=${core.version}::-D${board}::-DMPIDEVER=${core.revision}::-DMPIDE=${core.version}

core.library.api=pic32

core.header=WProgram.h
core.version=157
version=157
core.revision=10001932
revision=10001932


ldscript=unknown.ld
ldcommon=chipKIT-application-COMMON.ld

core.ldflags=-T::${find:${board:root}::${core:root}/pic32,${ldscript}}::-T::${find:${board:root}::${core:root}/pic32,${ldcommon}}

library.path=libraries
examples.path=examples


board=_UNKNOWN_BOARD_

upload.avrdude.name=Upload to chipKIT board via AVRDude
upload.avrdude.command.linux_arm=${core:root}/tools/linux_arm/avrdude::-V::-p${build.mcu}::-P${port}::-b${upload.speed}::-C${core:root}/tools/linux_arm/avrdude.conf::-cstk500v2::-Uflash:w:${filename}.hex:i::${verbose}
upload.avrdude.command.linux_i386=${core:root}/tools/linux32/avrdude::-V::-p${build.mcu}::-P${port}::-b${upload.speed}::-C${core:root}/tools/linux32/avrdude.conf::-cstk500v2::-Uflash:w:${filename}.hex:i::${verbose}
upload.avrdude.command.linux_amd64=${core:root}/tools/linux64/avrdude::-V::-p${build.mcu}::-P${port}::-b${upload.speed}::-C${core:root}/tools/linux64/avrdude.conf::-cstk500v2::-Uflash:w:${filename}.hex:i::${verbose}
upload.avrdude.command.windows=${core:root}/tools/windows/avrdude::-V::-p${build.mcu}::-P${port}::-b${upload.speed}::-C${core:root}/tools/windows/avrdude.conf::-cstk500v2::-Uflash:w:${filename}.hex:i::${verbose}
upload.avrdude.command.macosx=${core:root}/tools/macosx/avrdude::-V::-p${build.mcu}::-P${port}::-b${upload.speed}::-C${core:root}/tools/macosx/avrdude.conf::-cstk500v2::-Uflash:w:${filename}.hex:i::${verbose}
upload.avrdude.ldsuffix=
upload.avrdude.verbose=-v
upload.avrdude.quiet=-q::-q
upload.avrdude.dtr=yes
upload.avrdude.rts=yes

upload.pickit2.name=PicKit 2
upload.pickit2.command.linux_arm=${core:root}/tools/linux_arm/pic32prog::-S::-p::${filename}.hex
upload.pickit2.command.linux_i386=${core:root}/tools/linux32/pic32prog::-S::-p::${filename}.hex
upload.pickit2.command.linux_amd64=${core:root}/tools/linux64/pic32prog::-S::-p::${filename}.hex
upload.pickit2.command.windows=${core:root}/tools/windows/pic32prog::-S::-p::${filename}.hex
upload.pickit2.command.macosx=${core:root}/tools/macosx/pic32prog::-S::-p::${filename}.hex
upload.pickit2.ldsuffix=-nobootloader
upload.pickit2.using=hid

upload.avrdude.verbose=-v
upload.avrdude.quiet=-q::-q

upload.maxbaud=2000000

upload.pic32prog.name=Upload to chipKIT board via pic32prog
upload.pic32prog.command.linux_arm=${core:root}/tools/linux_arm/pic32prog::-S::-d::${port}::-B::${upload.maxbaud}::-p::${filename}.hex
upload.pic32prog.command.linux_i386=${core:root}/tools/linux32/pic32prog::-S::-d::${port}::-B::${upload.maxbaud}::-p::${filename}.hex
upload.pic32prog.command.linux_amd64=${core:root}/tools/linux64/pic32prog::-S::-d::${port}::-B::${upload.maxbaud}::-p::${filename}.hex
upload.pic32prog.command.windows=${core:root}/tools/windows/pic32prog::-S::-d::${port}::-B::${upload.maxbaud}::-p::${filename}.hex
upload.pic32prog.command.macosx=${core:root}/tools/macosx/pic32prog::-S::-d::${port}::-B::${upload.maxbaud}::-p::${filename}.hex
upload.pic32prog.ldsuffix=
upload.pic32prog.dtr=yes
upload.pic32prog.rts=yes

sketch.upload=avrdude::pickit2::pic32prog::pickit3::mdb
bootloader.upload=pickit2::pickit3::mdb

family=pic32
icon.128=icons/mpide128.png
icon.64=icons/mpide64.png
icon.48-icons/mpide48.png
icon.32=icons/mpide32.png
icon.22=icons/mpide22.png
icon.16=icons/mpide16.png

makefile.template=${core:root}/Makefile.tpl

prefs.cores.type=section
prefs.cores.name=Cores
prefs.cores.chipkit.name=chipKIT
prefs.cores.chipkit.type=section
prefs.cores.chipkit.ipecmd_path.name=Location of ipecmd.jar
prefs.cores.chipkit.ipecmd_path.type=fileselect
prefs.cores.chipkit.ipecmd_path.default.windows=C:\\Program Files (x86)\\Microchip\\MPLABX\\mplab_ipe\\ipecmd.jar
prefs.cores.chipkit.ipecmd_path.default.linux=/opt/microchip/mplabx/v3.05/mplab_ipe/ipecmd.jar

prefs.cores.chipkit.mdb_path.name=Location of mdb.jar
prefs.cores.chipkit.mdb_path.type=fileselect
prefs.cores.chipkit.mdb_path.default.windows=C:\\Program Files (x86)\\Microchip\\MPLABX\\mplab_ide\\lib\\mdb.jar
prefs.cores.chipkit.mdb_path.default.linux=/opt/microchip/mplabx/v3.05/mplab_ide/lib/mdb.jar


upload.pickit3.name=Upload using PICkit3
upload.pickit3.command.windows=${java:java.home}/bin/java.exe::-jar::${prefs:cores.chipkit.ipecmd_path}::-M::-W3.3::-P${build.mcu}::-F${filename}.hex::-TPPK3::-OL
upload.pickit3.command=${java:java.home}/bin/java::-jar::${prefs:cores.chipkit.ipecmd_path}::-M::-W3.3::-P${build.mcu}::-F${filename}.hex::-TPPK3::-OL
upload.pickit3.using=hid
upload.pickit3.ldsuffix=-nodebug


upload.mdb.name=Upload with MDB
upload.mdb.using=script
upload.mdb.script.0=core:pickit3.js::program::PIC${build.mcu}::${build.path}/${filename}.hex
upload.mdb.ldsuffix=-nobootloader

init.script.0=__builtin_loadjar::${prefs:cores.chipkit.mdb_path}

@begin file=pickit3.js format=javascript

function program(part, file) {
    importClass(java.io.File);
    importClass(org.uecide.Base);
    var jarfile = Base.preferences.get("cores.chipkit.mdb_path");

    if (jarfile == null) {
        ctx.error("Before you can upload with MDB you must first set");
        ctx.error("the path to the mdb.jar file in preferences.");
        ctx.error("After setting or changing the path you will have");
        ctx.error("to restart UECIDE so it can integrate the jar file.");
        return false;
    }

    importClass(com.microchip.mplab.mdb.debugapi.CmdDebugger);
    importClass(com.microchip.mplab.mdb.debugapi.ToolFinder);
    importClass(com.microchip.mplab.mdbcore.debugger.Debugger);

    var cmdDebugger = new CmdDebugger(part);
    var toolFinder = new ToolFinder();
    var assembly = cmdDebugger.getAssembly();
    toolFinder.initialize();
    var properties = cmdDebugger.getToolProperties();

    ctx.bullet("Programming with PICkit3™");
    ctx.bullet2("Searching for PICkit3™");

    var toolid = toolFinder.getToolIdByCmdToolName("PICKIT3", 0);
    var meta = toolFinder.getPlatformToolMetaByCmdToolName("PICKIT3");

    if (meta == null) {
        ctx.error("Unable to find PICkit3™");
        return false;
    }

    ctx.bullet2("Connecting to PICkit3™");

    var toolclass = meta.getClassName();
    var configurationObjectID = meta.getConfigurationObjectID();
    var platformToolFlavor = meta.getFlavor();

    cmdDebugger.setTool(configurationObjectID, toolclass, platformToolFlavor, toolid);
    cmdDebugger.SetToolProperties(properties);
    cmdDebugger.connect(Debugger.CONNECTION_TYPE.PROGRAMMER);
    ctx.bullet2("Uploading program...");
    if (!cmdDebugger.program(file)) {
        ctx.error("Programming failed");
        cmdDebugger.disconnect();
        return false;
    }
    cmdDebugger.disconnect();
    ctx.bullet("Upload complete");
    return true;
}

@end
